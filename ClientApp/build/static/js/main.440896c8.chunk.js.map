{"version":3,"sources":["components/Footer/Footer.js","components/Header/Header.js","components/Loader/Loader.js","components/PageHeading/PageHeading.js","components/MainContent/MainContent.js","App.js","registerServiceWorker.js","redux/reducers/plantReducers.js","redux/reducers/index.js","redux/constants/plantsConstants.js","redux/store/store.js","index.js"],"names":["Footer","className","Header","Loader","PageHeading","MainContent","useState","plants","setPlants","loading","setLoading","now","useDispatch","Date","getAllPlants","axios","get","then","result","response","data","useEffect","map","plant","key","id","wateringStatus","getTime","lastWateringSeason","src","alt","name","toFixed","onClick","document","getElementById","innerText","wateringEndTiming","console","log","put","wateringStartTiming","setTimeout","disabled","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","INITIAL_STATE","hasError","rootReducer","combineReducers","action","type","payload","store","createStore","applyMiddleware","thunk","baseUrl","getElementsByTagName","getAttribute","rootElement","ReactDOM","render","basename","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.440896c8.chunk.js","sourcesContent":["// Programmer: Amritpal Singh\r\n// File Name: Footer.js\r\n// Date: 31 January 2022\r\n// Descrition: Footer component showing footer of the website\r\n\r\n\r\n\r\nimport React from 'react';\r\nimport './Footer.css';\r\n\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer className=\"sitefooter\">\r\n            <p>\r\n                Hope you liked our SVPlants System\r\n            </p>\r\n        </footer>)\r\n        ;\r\n}\r\n\r\nexport default Footer;\r\n","// Programmer: Amritpal Singh\r\n// File Name: MainContent.js\r\n// Date: 31 January 2022\r\n// Descrition: Header Component showing the head of the website\r\n\r\n\r\n\r\n\r\n\r\nimport React from 'react';\r\nimport './Header.css';\r\n\r\nfunction Header() {\r\n    return (\r\n        <header className=\"siteheader\">\r\n            <div className=\"site-title\">SVPlants</div>\r\n            <div className=\"site-description\">We don't want your Plants to die.</div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","// Programmer: Amritpal Singh\r\n// File Name: Loader.js\r\n// Date: 31 January 2022\r\n// Descrition: This file containes Loader component which is shown if content is not loaded yet\r\n\r\n\r\n\r\n\r\nimport React from \"react\";\r\nimport \"./Loader.css\";\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className=\"loading\">\r\n            <div></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Loader;","// Programmer: Amritpal Singh\r\n// File Name: PageHeading.js\r\n// Date: 31 January 2022\r\n// Descrition: This file containe the page heading component which display heading of the page to users\r\n\r\n\r\n\r\n\r\nimport React from 'react';\r\n\r\nimport './PageHeading.css'\r\n\r\nfunction PageHeading() {\r\n    return (\r\n        <div className=\"page-header\">\r\n            <h2 className=\"page-header__heading\">Water the plants</h2>\r\n            <p>\r\n                You can <em>individually</em> fill the water by going on each plant.\r\n                If the plants aren't watered for more than <em>six hours</em> you are notified with red alert error msg and green background color on that plant.\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PageHeading;\r\n","// Programmer: Amritpal Singh\r\n// File Name: MainContent.js\r\n// Date: 31 January 2022\r\n// Descrition: This file is where main component exist of the web application\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport Loader from '../Loader/Loader';\r\nimport PageHeading from '../PageHeading/PageHeading';\r\nimport './MainContent.css';\r\nimport axios from 'axios';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n// import {getAllPlants} from './../../redux/actions/plantActions'\r\n\r\nfunction MainContent() {\r\n\r\n    const [plants, setPlants] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    //I could have implmented redux but this seemed more easy than implementing redux here to I choosed not to implement redux\r\n    //All the template for redux use is also setted up by me so anything I can implement redux\r\n    const dispatch =  useDispatch();\r\n    let now = new Date();\r\n    // const plants = useSelector((state) => state.plants);\r\n\r\n\r\n    function getAllPlants() {\r\n        axios.get(\"api/Plants/GetPlants\").then(\r\n            result => {\r\n                const response = result.data;\r\n                setPlants(response);\r\n                setLoading(false);\r\n            }\r\n            \r\n        )\r\n    }\r\n\r\n    useEffect(() => {\r\n        getAllPlants();\r\n        // dispatch(getAllPlants());\r\n    }, [now]);\r\n\r\n\r\n\r\n    function waterPlants(id) {\r\n        // get the button pressed plants details\r\n        axios.get(`api/Plants/SinglePlant/${id}`).then(plant => {\r\n            const response = plant.data;\r\n            // checking what is button pressed for.....watering or for stopping watering ?\r\n            if (document.getElementById(`button_${id}`).innerText === \"Tap here to Stop Watering Plant\") {\r\n                setLoading(true);\r\n                response.wateringStatus = false;\r\n                response.wateringEndTiming = now.getTime();\r\n                console.log('End Time :' + response.wateringEndTiming / 1000);\r\n                // updating the palant details\r\n                axios.put(\"api/Plants/UpdatePlantWateringStatus/\" + id, response).then(result => {\r\n                    getAllPlants();\r\n                    setLoading(false);\r\n\r\n                    //if watering of plant stopped very early prinitng error msg\r\n                    if (((result.data.wateringEndTiming / 1000) - (result.data.wateringStartTiming / 1000)) < 10) {\r\n                        document.getElementById(`errMsg_${id}`).innerText = 'Error: In order to water the plant please dont stop watering atleast for 10 seconds'\r\n                        setTimeout(() => {\r\n                            document.getElementById(`errMsg_${id}`).innerText = ''\r\n                        }, 5000);\r\n                    }\r\n                    else {\r\n                        // plant is now watered so disabling the water button for 30 seconds\r\n                        document.getElementById(`button_${id}`).disabled = true;\r\n                        setTimeout(() => {\r\n                            document.getElementById(`button_${id}`).disabled = false;\r\n                        }, 30000);\r\n                    }\r\n\r\n                    document.getElementById(`button_${id}`).innerText = \"Tap here to the Water Plant\";\r\n                });\r\n            }\r\n            else {\r\n\r\n                // starting the watering of plant\r\n                document.getElementById(`button_${id}`).innerText = \"Tap here to Stop Watering Plant\";\r\n                setLoading(true);\r\n                response.wateringStatus = true;\r\n                response.wateringStartTiming = now.getTime();\r\n                axios.put(\"api/Plants/UpdatePlantWateringStatus/\" + id, response).then(result => {\r\n                    getAllPlants();\r\n                    }\r\n                );\r\n            }\r\n            setLoading(false);\r\n        });\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <main className=\"maincontent\">\r\n            <PageHeading />\r\n            {loading ? (\r\n                <Loader />\r\n            ) : (\r\n                <>\r\n                    {\r\n                        plants.map((plant) => (\r\n                            <article key={plant.id} className={((!plant.wateringStatus) && (now.getTime() - plant.lastWateringSeason) / (60 * 60 * 1000)) >= 6 ? \"plant_needWater\" : \"\"}>\r\n                                <div className='plants'>\r\n                                    <figure className=\"plant__image\">\r\n                                        <img src='./Plant.svg' alt=\"Plant\" loading=\"lazy\" />\r\n                                    </figure>\r\n                                    <div className='plant__info'>\r\n                                        <h1>{plant.name}</h1>\r\n                                        <ul>\r\n                                            <li><b>Watering Status:</b> <span> {plant.wateringStatus ? \"Watering\" : \"Not Watering\"}</span></li>\r\n                                            <li><b>Last Watering Session:</b>\r\n                                                <span>\r\n                                                    {plant.lastWateringSeason ?\r\n                                                        (\r\n                                                            ((now.getTime() - plant.lastWateringSeason) / (1000 * 60)) >= 1 ?\r\n                                                                (\r\n                                                                    ((now.getTime() - plant.lastWateringSeason) / (60 * 60 * 1000)) >= 1 ? ` ${((now.getTime() - plant.lastWateringSeason) / (60 * 1000 * 60)).toFixed(1)} hrs ago` : ` ${((now.getTime() - plant.lastWateringSeason) / (60 * 1000)).toFixed(1)} min ago`\r\n                                                                )\r\n                                                                : ` ${((now.getTime() - plant.lastWateringSeason) / 1000).toFixed(0)} sec ago`\r\n                                                        )\r\n                                                        : \" ----\"}\r\n                                                </span>\r\n                                            </li>\r\n                                            <li className={((!plant.wateringStatus) && (now.getTime() - plant.lastWateringSeason) / (60 * 60 * 1000)) >= 6 ? \"waterPlantMsg\" : \"noMsg\"} ><b>URGENTLY NEED WATER</b></li>\r\n                                        </ul>\r\n                                        <button id={`button_${plant.id}`} onClick={() => waterPlants(plant.id)}>{plant.wateringStatus ? \"Tap here to Stop Watering Plant\" : \"Tap here to the Water Plant\"}</button>\r\n                                    </div>\r\n                                </div>\r\n                                <div className='errMsg' id={`errMsg_${plant.id}`}></div>\r\n                            </article>\r\n                        ))\r\n                    }\r\n                </>\r\n            )}\r\n\r\n        </main >\r\n    );\r\n}\r\n\r\nexport default MainContent;\r\n","// Name: Amritpal Singh\r\n// File Name: App.js\r\n// Date: 31 January 2022\r\n// Descrition: All components combines here..\r\n\r\n\r\n\r\nimport React from 'react';\r\nimport Footer from './components/Footer/Footer';\r\nimport Header from './components/Header/Header';\r\nimport MainContent from './components/MainContent/MainContent';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className='content'>\r\n      <Header />\r\n      <MainContent />\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport default function register () {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","// Name: Amritpal Singh\r\n// File Name: plantReducers.js\r\n// Date: 31 January 2022\r\n// Descrition: This file contains reducers of redux\r\n\r\n\r\n\r\nimport {\r\n    GET_ALL_PLANTS_REQUEST,\r\n    GET_ALL_PLANTS_ERROR,\r\n    GET_ALL_PLANTS_SUCCESS\r\n} from '../constants/plantsConstants';\r\n\r\n\r\nconst INITIAL_STATE = {\r\n    loading: false,\r\n    hasError: false,\r\n    error: null,\r\n    data: []\r\n}\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case GET_ALL_PLANTS_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        case GET_ALL_PLANTS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                hasError: false,\r\n                data: action.payload\r\n            };\r\n        case GET_ALL_PLANTS_ERROR:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                hasError: true,\r\n                error: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","// Name: Amritpal Singh\r\n// File Name: index.js\r\n// Date: 31 January 2022\r\n// Descrition: In this file all the reducers combines to make a single root reducer\r\n\r\n\r\n\r\nimport { combineReducers } from 'redux';\r\nimport plantReducers from './plantReducers';\r\n\r\nconst rootReducer = combineReducers({\r\n    plants: plantReducers\r\n});\r\n\r\nexport default rootReducer;","// Name: Amritpal Singh\r\n// File Name: plantsConstants.js\r\n// Date: 31 January 2022\r\n// Descrition: In this file some constantts exist to avoid errors in implementation of redux\r\n\r\n\r\n\r\nexport const GET_ALL_PLANTS_REQUEST = \"GET_ALL_PLANTS_REQUEST\";\r\nexport const GET_ALL_PLANTS_SUCCESS = \"GET_ALL_PLANTS_SUCCESS\";\r\nexport const GET_ALL_PLANTS_ERROR = \"GET_ALL_PLANTS_ERROR\";","// Name: Amritpal Singh\r\n// File Name: store.js\r\n// Date: 31 January 2022\r\n// Descrition: In this file store for providing overall state access to whole application\r\n\r\n\r\n\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from \"../reducers\";\r\n\r\nexport const store = createStore(rootReducer, {}, applyMiddleware(thunk));\r\n\r\n","// Name: Amritpal Singh\r\n// File Name: index.js\r\n// Date: 31 January 2022\r\n// Descrition: This file adds the code of react to HTML file and also provide access of redux store to whole application\r\n\r\n\r\n\r\n\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport './index.css';\r\nimport {store} from './redux/store/store'\r\nimport {Provider} from 'react-redux'\r\n\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\r\nconst rootElement = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <BrowserRouter basename={baseUrl}>\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>,\r\n  rootElement);\r\n\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}